---
title: "Gapminder - Create Life Expectancy Model"
format: html
---

```{python}
#| echo: false
#| output: false

username = "ryjohnson09"

import pins
import os
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing, ensemble, pipeline, compose, model_selection
import numpy as np
from vetiver import vetiver_pin_write, VetiverModel
```


## Create Random Forests Model

```{python}
# Read in pinned data
API_KEY = os.getenv('CONNECT_API_KEY')
SERVER = os.getenv('CONNECT_SERVER')

board = pins.board_connect(server_url=SERVER, api_key=API_KEY, allow_pickle_read=True)

gapminder = board.pin_read(f"{username}/gapminder")

# Preprocess categorical variables
X = gapminder.drop(columns=['lifeExp'])  # Feature variables
y = gapminder['lifeExp']  # Target variable

# Define categorical and numerical columns
categorical_cols = ['country', 'continent']

# Train-test split
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2)

# Preprocess and Fit
oe = compose.make_column_transformer(
    (preprocessing.OrdinalEncoder(
            handle_unknown="use_encoded_value", unknown_value=-1),
        categorical_cols,),
    remainder="passthrough",
).fit(X_train)

rf = ensemble.RandomForestRegressor().fit(oe.transform(X_train), y_train)
gapminder_fit = pipeline.Pipeline([("ordinal_encoder", oe), ("random_forest", rf)])

# Make predictions
y_pred = gapminder_fit.predict(X_test)

# Visualization: Actual vs Predicted Life Expectancy
plt.figure(figsize=(12, 6))

# Plot 1: Actual vs. Predicted
plt.subplot(1, 2, 1)
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual Life Expectancy')
plt.ylabel('Predicted Life Expectancy')
plt.title('Actual vs. Predicted Life Expectancy')
```

## Save Model as Pin

```{python}
# Convert to Vetiver Model
v = VetiverModel(gapminder_fit, model_name=f'{username}/gapminder_model_rf', prototype_data=X)

# Write model as pin to Posit Connect
vetiver_pin_write(board, v)
```