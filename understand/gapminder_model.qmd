---
title: "Gapminder - Predict Life Expectancy"
format: html
---
## Read Pinned Data

```{python}
import pins
import os
from dotenv import load_dotenv

load_dotenv()
API_KEY = os.getenv('CONNECT_API_KEY')
SERVER = os.getenv('CONNECT_SERVER')

board = pins.board_connect(server_url=SERVER, api_key=API_KEY, allow_pickle_read=True)

gapminder = board.pin_read("ryjohnson09/gapminder")

gapminder
```

## Setup

```{python}
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing, ensemble, pipeline, compose, model_selection
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
```

## Define Datasets

```{python}
# Preprocess categorical variables
X = gapminder.drop(columns=['lifeExp'])  # Feature variables
y = gapminder['lifeExp']  # Target variable


# Define categorical and numerical columns
categorical_cols = ['country', 'continent']
```

## Split Data

```{python}
# Train-test split
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2)
```

## Preprocessing and Fitting
```{python}
oe = compose.make_column_transformer(
    (preprocessing.OrdinalEncoder(
            handle_unknown="use_encoded_value", unknown_value=-1),
        categorical_cols,),
    remainder="passthrough",
).fit(X_train)

rf = ensemble.RandomForestRegressor().fit(oe.transform(X_train), y_train)
gapminder_fit = pipeline.Pipeline([("ordinal_encoder", oe), ("random_forest", rf)])
```

## Make Predictions
```{python}
# Make predictions
y_pred = gapminder_fit.predict(X_test)
```

## Evaluate the Model

```{python}
# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")
```

## Visualize Predictions

```{python}
# Visualization: Actual vs Predicted Life Expectancy
plt.figure(figsize=(12, 6))

# Plot 1: Actual vs. Predicted
plt.subplot(1, 2, 1)
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual Life Expectancy')
plt.ylabel('Predicted Life Expectancy')
plt.title('Actual vs. Predicted Life Expectancy')
```

## Convert Model to Vetiver Model

```{python}
from vetiver import VetiverModel

v = VetiverModel(gapminder_fit, model_name='ryjohnson09/gapminder_model_rf', prototype_data=X)
```

## Save Model as Pin

```{python}
from vetiver import vetiver_pin_write

vetiver_pin_write(board, v)
```

## Deploy API to Posit Connect

```{python}
from vetiver import VetiverAPI, deploy_rsconnect
from rsconnect.api import RSConnectServer

connect_server = RSConnectServer(
    url=os.getenv("CONNECT_SERVER"), 
    api_key=os.getenv("CONNECT_API_KEY")
)

deploy_rsconnect(board = board, pin_name = "ryjohnson09/gapminder_model_rf", connect_server = connect_server)
```

## Make a Query

```{python}
from vetiver.server import predict, vetiver_endpoint
import pandas as pd

# Add API Content URL below
api_url = "https://pub.conf.posit.team/public/gapminder_model_rf"

endpoint = vetiver_endpoint(
    api_url + "/predict"
)

api_key=os.getenv("CONNECT_API_KEY")

new_data = pd.DataFrame({
    'country': ["Zimbabwe"], 
    'continent': ["Africa"], 
    'year': [2000], 
    'pop': [11405000], 
    'gdpPercap': [800]
    })

h = {"Authorization": f"Key {api_key}"}

response = predict(endpoint=endpoint, data=new_data, headers=h)

response
```